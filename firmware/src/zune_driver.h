#pragma once
#include "stdint.h"
#include "esp_avrc_api.h"

void setupZune(int tx_pin, int rx_pin, int _auth_pin);
void handle_avrcp(esp_avrc_tg_cb_param_t::avrc_tg_psth_cmd_param);

// messages are comprised of 5 parts
// 0x00 - begin
// 0x01 - source (0x41 - dock, 0x61 - zune)
// 0x02 - message type
//      0x10 - identity related
//           0x00 - from zune, dock responds with [0x00 0x00 0x00 0x00]
//           0x01 - from zune, dock replies with - dock_message_14
//           0x02 - send identity message
//           0x04 - dock xbox chip number, 81xxxx, 2nd gen dock is 0301
//      0x11 - passthrough to xbox chip
//      0x12 - zune sends it, never seen a dock send it. responses are varied
//      0x18 - media command
//           0x01(length) 0x00 0xe6(crc)      - ACK
//           0x02(length) 0x21 0x64 0x60(crc) - Next
//           0x02(length) 0x20 0xe4 0xe1(crc) - Previous
//           0x02(length) 0x6e 0x64 0x13(crc) - play
//           0x02(length) 0x6e 0xe4 0x93(crc) - pause
// 0x03 - message length
// 0x04-[length] - data
// end - crc

// the following python generates a CRC, most of the time. I will use precomputed CRC for almost everything
// checksum = 0
// count = 0
// for el in packet:
//     checksum += ord(el)
//     count +=1

// print (hex(checksum ^ 0xFF), count - 2) 

// //first message is from the zune. does not conform to any know shcma
// uint8_t zune_hello[4]
// {
//     0x5F, 0x4F, 0xD7, 0xF9
// };

// // these are from the packet capture
// uint8_t dock_hello[9]
// {
//     0x41, 0x41, 0x10, 0x04,
//     0x00, 0x03, 0x00, 0x01, // identity of the xbox chip, starts with 81xxxx
//     0xE7
// };

// uint8_t zune_request_identity[6]
// {
//     0x41, 0x61, 0x10, 0x01,
//     0x02, 0xEC
// };

// //AA�Xbox Security Method 3, Version 1.00, � 2005 Microsoft Corporation. All rights reserved.
// uint8_t dock_identity[183]
// {   //1    2     3     4     5     6     7     8     9     10
//     0x41, 0x41, 0x10, 0xB2, 0x00, 0x02, 0x58, 0x00, 0x62, 0x00,// 10
//     0x6F, 0x00, 0x78, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00,// 20
//     0x63, 0x00, 0x75, 0x00, 0x72, 0x00, 0x69, 0x00, 0x74, 0x00,// 30
//     0x79, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x74, 0x00,// 40
//     0x68, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x20, 0x00, 0x33, 0x00,// 50
//     0x2C, 0x00, 0x20, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00,// 60
//     0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00,// 70
//     0x31, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x30, 0x00, 0x2C, 0x00,// 80
//     0x20, 0x00, 0xA9, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00,// 90
//     0x30, 0x00, 0x35, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00,// 100
//     0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00,// 110
//     0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00,// 120
//     0x72, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x61, 0x00,// 130
//     0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x2E, 0x00,// 140
//     0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00,// 150
//     0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00,// 160
//     0x73, 0x00, 0x20, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00,// 170
//     0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00,// 180
//     0x2E, 0x00, 0x15// 183
// };

// uint8_t dock_message_14[27]
// {
//     0x41, 0x41, 0x10, 0x16, //4
//     0x00, 0x01, 0x5A, 0x00, //8
//     0x75, 0x00, 0x6E, 0x00, //12
//     0x65, 0x00, 0x22, 0x21, //16
//     0x20, 0x00, 0x44, 0x00, //20
//     0x6F, 0x00, 0x63, 0x00, //24
//     0x6B, 0x00, 0x52 //27
// };